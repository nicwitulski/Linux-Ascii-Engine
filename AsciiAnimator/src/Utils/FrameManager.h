//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file FrameManager.h
/// @author Nicholas Witulski (nicwitulski@gmail.com)
/// @brief Handles frame navigation, creation, and duration editing for the animation editor
/// @version 0.1
/// @date 2025-06-27
///
/// @copyright Copyright (c) 2025
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef FRAMEMANAGER_H
#define FRAMEMANAGER_H

#include "../../../GameEngine/include/Frame.h"
#include <memory>

class Entity;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class FrameManager
///
/// Handles frame navigation, creation, and duration editing for the animation editor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
class FrameManager
{
private:
   std::shared_ptr<Entity> visibleEntity;
   std::shared_ptr<Entity> drawnEntity;
   std::shared_ptr<Entity> greyedBackgroundEntity;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn createGreyedOutFrame
   ///
   /// @param sourceFrame - Frame to create greyed out version of
   /// @return Frame with greyed out colors
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   Frame createGreyedOutFrame(const Frame& sourceFrame) const;

public:
   FrameManager();
   FrameManager(std::shared_ptr<Entity> visible, std::shared_ptr<Entity> drawn, std::shared_ptr<Entity> greyed);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setEntities
   ///
   /// Sets the entities for the frame manager
   /// @param visible - The visible entity
   /// @param drawn - The drawn entity
   /// @param greyed - The greyed background entity
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setEntities(std::shared_ptr<Entity> visible, std::shared_ptr<Entity> drawn,
                    std::shared_ptr<Entity> greyed);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn nextFrame
   ///
   /// Moves to the next frame or creates a new one if at the end
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void nextFrame();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn previousFrame
   ///
   /// Moves to the previous frame
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void previousFrame();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn syncFrameToDrawnEntity
   ///
   /// Syncs the current frame from visibleEntity to drawnEntity
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void syncFrameToDrawnEntity();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn createNewFrame
   ///
   /// Creates a new frame and adds it to both entities
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void createNewFrame();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setGreyedBackground
   ///
   /// @param sourceFrame - Frame to display as greyed background
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setGreyedBackground(const Frame& sourceFrame);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn clearGreyedBackground
   ///
   /// Clears the greyed background display
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void clearGreyedBackground();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setFrameDuration
   ///
   /// Sets the duration of the current frame
   /// @param duration - Duration in seconds
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setFrameDuration(float duration);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getCurrentFrameDuration
   ///
   /// @return The duration of the current frame in seconds
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   float getCurrentFrameDuration() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn hasNextFrame
   ///
   /// @return True if there is a next frame
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool hasNextFrame() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn hasPreviousFrame
   ///
   /// @return True if there is a previous frame
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool hasPreviousFrame() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getCurrentFrameIndex
   ///
   /// @return The current frame index
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   size_t getCurrentFrameIndex() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn frameHasContent
   ///
   /// @return True if the current frame has any drawn content
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool frameHasContent() const;
};

#endif
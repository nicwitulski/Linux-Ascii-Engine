//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file DrawingTool.h
/// @author Nicholas Witulski (nicwitulski@gmail.com)
/// @brief Handles drawing, erasing, and brush size management for the animation editor
/// @version 0.1
/// @date 2025-06-27
///
/// @copyright Copyright (c) 2025
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef DRAWINGTOOL_H
#define DRAWINGTOOL_H

#include "../../../GameEngine/include/Pixel.h"
#include "../../../GameEngine/include/Position.h"
#include "../../../GameEngine/include/RGB.h"
#include <memory>

class Entity;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class DrawingTool
///
/// Handles drawing, erasing, and brush size management for the animation editor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
class DrawingTool
{
private:
   char drawingCharacter;
   int  currentBrushSize;
   RGB  currentTextColor;
   RGB  currentBackgroundColor;

public:
   DrawingTool();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setDrawingCharacter
   ///
   /// @param character - The character to use for drawing
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setDrawingCharacter(char character);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getDrawingCharacter
   ///
   /// @return The current drawing character
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   char getDrawingCharacter() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setBrushSize
   ///
   /// @param size - The brush size (1-6)
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setBrushSize(int size);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getBrushSize
   ///
   /// @return The current brush size
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   int getBrushSize() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setTextColor
   ///
   /// @param color - The text color to use
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setTextColor(const RGB& color);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getTextColor
   ///
   /// @return The current text color
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const RGB& getTextColor() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setBackgroundColor
   ///
   /// @param color - The background color to use
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setBackgroundColor(const RGB& color);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getBackgroundColor
   ///
   /// @return The current background color
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const RGB& getBackgroundColor() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn drawAtPosition
   ///
   /// Draws the current character at the specified position using brush size
   /// @param entity - The entity to draw on
   /// @param centerX - X position of center of brush
   /// @param centerY - Y position of center of brush
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void drawAtPosition(std::shared_ptr<Entity> entity, int centerX, int centerY);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn eraseAtPosition
   ///
   /// Erases characters at the specified position using brush size
   /// @param entity - The entity to erase from
   /// @param centerX - X position of center of brush
   /// @param centerY - Y position of center of brush
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void eraseAtPosition(std::shared_ptr<Entity> entity, int centerX, int centerY);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn isErasing
   ///
   /// @return True if currently in erasing mode (character is space)
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool isErasing() const;
};

#endif
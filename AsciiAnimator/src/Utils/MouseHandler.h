//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file MouseHandler.h
/// @author Nicholas Witulski (nicwitulski@gmail.com)
/// @brief Handles mouse interactions for the animation editor
/// @version 0.1
/// @date 2025-06-27
///
/// @copyright Copyright (c) 2025
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef MOUSEHANDLER_H
#define MOUSEHANDLER_H

#include "../../../GameEngine/include/Position.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class MouseHandler
///
/// Handles mouse interactions for the animation editor
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
class MouseHandler
{
private:
   bool     cameraDrag;
   bool     drawing;
   Position lastMousePosition;

public:
   MouseHandler();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn isCameraDragging
   ///
   /// @return True if camera is currently being dragged
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool isCameraDragging() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn isDrawing
   ///
   /// @return True if currently drawing
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool isDrawing() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn startCameraDrag
   ///
   /// Starts camera dragging at the given position
   /// @param position - Mouse position where drag started
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void startCameraDrag(const Position& position);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn stopCameraDrag
   ///
   /// Stops camera dragging
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void stopCameraDrag();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn startDrawing
   ///
   /// Starts drawing mode
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void startDrawing();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn stopDrawing
   ///
   /// Stops drawing mode
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void stopDrawing();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn updateCameraDrag
   ///
   /// Updates camera position based on mouse movement
   /// @param currentPosition - Current mouse position
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void updateCameraDrag(const Position& currentPosition);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getWorldPosition
   ///
   /// Converts screen position to world position using camera offset
   /// @param screenPosition - Screen position to convert
   /// @return World position
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   Position getWorldPosition(const Position& screenPosition) const;
};

#endif
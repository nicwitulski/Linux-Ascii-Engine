//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file MainMenuState.h
/// @author Nicholas Witulski (nicwitulski@gmail.com)
/// @brief Main menu. Loads animation project or create new project
/// @version 0.1
/// @date 2025-06-27
///
/// @copyright Copyright (c) 2025
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef MAINMENUSTATE_H
#define MAINMENUSTATE_H

#include "AppState.h"
#include "../AppParameters/AppParameters.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class MainMenuState
///
/// Main menu state that handles project creation and loading
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
class MainMenuState : public GameState
{
private:
   // Main menu window
   std::shared_ptr<NcursesWindow> mainMenuWindow;
   std::shared_ptr<UIElement>     mainMenu;
   std::shared_ptr<Button>        newAnimationButton;
   std::shared_ptr<Button>        loadAnimationButton;
   std::shared_ptr<Button>        quitButton;

   // Animation browser menu
   std::shared_ptr<Menu> animationBrowserMenu;
   bool                  showAnimationBrowser;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn newAnimationFunction
   ///
   /// Function that gets executed when the newAnimationButton gets pressed
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void newAnimationFunction();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn loadAnimationFunction
   ///
   /// Function that gets executed when the loadAnimationButton gets pressed
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void loadAnimationFunction();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn quitFunction
   ///
   /// Function that gets executed when the quitButton gets pressed
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void quitFunction();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn createAnimationBrowserMenu
   ///
   /// Creates and initializes the animation browser menu
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void createAnimationBrowserMenu();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn scanAnimationDirectories
   ///
   /// Scans the AsciiAnimator/src/Animations/ directory for animation folders
   /// @return vector of directory names found
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   std::vector<std::string> scanAnimationDirectories();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn onAnimationSelected
   ///
   /// Callback for when an animation is selected from the menu
   /// @param animationName - name of the selected animation directory
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void onAnimationSelected(const std::string& animationName);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn onAnimationBrowserCancelled
   ///
   /// Callback for when the animation browser is cancelled
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void onAnimationBrowserCancelled();

   States nextState = States::None;

public:
   void onEnter() override;
   void update() override;
   void onExit() override;

   GameState* getNextState() override;
};

#endif
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file AppState.h
/// @author Nicholas Witulski (nicwitulski@gmail.com)
/// @brief Main state of the animator
/// @version 0.1
/// @date 2025-06-27
///
/// @copyright Copyright (c) 2025
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef APPSTATE_H
#define APPSTATE_H

#include "../../../GameEngine/include/GameEngine.h"
#include "../AppParameters/AppParameters.h"
#include "../Utils/DrawingTool.h"
#include "../Utils/FrameManager.h"
#include "../Utils/MouseHandler.h"

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class AppState
///
/// Main state of the animator
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
class AppState : public GameState
{
private:
   MEVENT event;

   // Utility classes
   DrawingTool  drawingTool;
   FrameManager frameManager;
   MouseHandler mouseHandler;

   // Entity management
   std::shared_ptr<Entity> drawnEntity;
   std::shared_ptr<Entity> visibleEntity;
   std::shared_ptr<Entity> greyedBackgroundEntity;

   // UI state
   bool        selectNewCharacter;
   bool        editingFrameDuration;
   std::string frameDurationInput;

   // UI elements
   std::shared_ptr<Slider> frameDurationSlider;
   std::shared_ptr<Button> brushSizeButton;
   std::shared_ptr<Slider> brushSizeSlider;

   // Button highlighting is now handled automatically by the InputHandler

   // Color editing
   RGB                            currentBackgroundColor;
   RGB                            currentTextColor;
   bool                           colorEditWindowOpen;
   std::shared_ptr<NcursesWindow> colorEditWindow;
   std::shared_ptr<Slider>        backgroundRedSlider;
   std::shared_ptr<Slider>        backgroundGreenSlider;
   std::shared_ptr<Slider>        backgroundBlueSlider;
   std::shared_ptr<Slider>        textRedSlider;
   std::shared_ptr<Slider>        textGreenSlider;
   std::shared_ptr<Slider>        textBlueSlider;
   std::shared_ptr<Button>        backgroundRedLabel;
   std::shared_ptr<Button>        backgroundGreenLabel;
   std::shared_ptr<Button>        backgroundBlueLabel;
   std::shared_ptr<Button>        textRedLabel;
   std::shared_ptr<Button>        textGreenLabel;
   std::shared_ptr<Button>        textBlueLabel;
   std::shared_ptr<Button>        colorExitButton;

   std::shared_ptr<Button> currentColorsButton;
   std::shared_ptr<Button> currentCharacterButton;
   std::shared_ptr<Button> eraserSelectButton;
   std::shared_ptr<Button> frameLengthButton;
   std::shared_ptr<Button> nextFrameButton;
   std::shared_ptr<Button> playAnimationButton;
   std::shared_ptr<Button> previousFrameButton;
   std::shared_ptr<Button> quitButton;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn currentCharacterButtonFunc
   ///
   /// Function that gets executed when the currentCharacterButton gets pressed
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void currentCharacterButtonFunc();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn eraserSelectButtonFunc
   ///
   /// Function that gets executed when the eraserSelectButton gets pressed
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void eraserSelectButtonFunc();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn nextFrameButtonFunc
   ///
   /// Function that gets executed when the nextFrameButton gets pressed
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void nextFrameButtonFunc();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn playAnimationButtonFunc
   ///
   /// Function that gets executed when the playAnimationButton gets pressed
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void playAnimationButtonFunc();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn previousFrameButtonFunc
   ///
   /// Function that gets executed when the previousFrameButton gets pressed
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void previousFrameButtonFunc();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn quitButtonFunc
   ///
   /// Function that gets executed when the quitButton gets pressed
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void quitButtonFunc();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn backgroundColorButtonFunc
   ///
   /// Function that gets executed when the backgroundColorButton gets pressed
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void backgroundColorButtonFunc();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn currentColorsButtonFunc
   ///
   /// Function that gets executed when the currentColorsButton gets pressed
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void currentColorsButtonFunc();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn colorExitButtonFunc
   ///
   /// Function that gets executed when the colorExitButton gets pressed
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void colorExitButtonFunc();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn updateButtonStates
   ///
   /// Updates the visibility and text of navigation buttons based on current frame state
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void updateButtonStates();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn handleMouseEvents
   ///
   /// Handles all mouse events for the application
   /// @param mousePos - Current mouse position
   /// @param mouseEvent - Mouse event data
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void handleMouseEvents(const Position& mousePos, const MEVENT* mouseEvent);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn handleDrawing
   ///
   /// Handles drawing operations at the specified position
   /// @param worldPos - World position to draw at
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void handleDrawing(const Position& worldPos);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn updateFrameDurationFromSlider
   ///
   /// Updates the current frame duration based on slider value
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void updateFrameDurationFromSlider();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn updateSliderFromFrameDuration
   ///
   /// Updates the slider position based on current frame duration
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void updateSliderFromFrameDuration();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn updateFrameDurationButtonText
   ///
   /// Updates the frameLengthButton text to show current duration
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void updateFrameDurationButtonText();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn durationToSliderValue
   ///
   /// Converts duration (0.1-5.0 seconds) to slider value (0.0-1.0)
   /// @param duration - duration in seconds
   /// @return slider value between 0.0 and 1.0
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   float durationToSliderValue(float duration) const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn sliderValueToDuration
   ///
   /// Converts slider value (0.0-1.0) to duration (0.1-5.0 seconds)
   /// @param sliderValue - slider value between 0.0 and 1.0
   /// @return duration in seconds
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   float sliderValueToDuration(float sliderValue) const;

   // Button highlighting methods removed - now handled automatically by InputHandler

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn updateBrushSizeFromSlider
   ///
   /// Updates the current brush size based on slider value
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void updateBrushSizeFromSlider();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn updateBrushSizeButtonText
   ///
   /// Updates the brushSizeButton text to show current brush size
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void updateBrushSizeButtonText();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn createColorEditWindow
   ///
   /// Creates and shows the color editing window
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void createColorEditWindow();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn closeColorEditWindow
   ///
   /// Closes and cleans up the color editing window
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void closeColorEditWindow();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn updateColorsFromSliders
   ///
   /// Updates the current colors based on slider values
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void updateColorsFromSliders();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn updateSlidersFromColors
   ///
   /// Updates the slider positions based on current colors
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void updateSlidersFromColors();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn updateCurrentColorsButtonText
   ///
   /// Updates the currentColorsButton text to show current character and colors
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void updateCurrentColorsButtonText();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn rgbToSliderValue
   ///
   /// Converts RGB value (0-1000) to slider value (0.0-1.0)
   /// @param rgbValue - RGB value between 0 and 1000
   /// @return slider value between 0.0 and 1.0
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   float rgbToSliderValue(int rgbValue) const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn sliderValueToRgb
   ///
   /// Converts slider value (0.0-1.0) to RGB value (0-1000)
   /// @param sliderValue - slider value between 0.0 and 1.0
   /// @return RGB value between 0 and 1000
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   int sliderValueToRgb(float sliderValue) const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setCurrentColorsButtonColors
   ///
   /// Sets the text and background colors for only the drawing character in the current colors button
   /// @param button - Button to modify
   /// @param textColor - Text color to apply
   /// @param backgroundColor - Background color to apply
   /// @param drawingChar - The character to apply colors to
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setCurrentColorsButtonColors(std::shared_ptr<Button> button, const RGB& textColor,
                                     const RGB& backgroundColor, char drawingChar);

   States nextState = States::None;

public:
   void onEnter() override;
   void update() override;
   void onExit() override;

   GameState* getNextState() override;
};

#endif
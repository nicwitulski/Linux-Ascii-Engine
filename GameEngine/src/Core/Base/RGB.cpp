//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file RGB.cpp
/// @author Nicholas Witulski (nicwitulski@gmail.com)
/// @brief Implementation of RGB class for color value management
/// @version 0.1
/// @date 2025-06-27
///
/// @copyright Copyright (c) 2025
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include "../../../include/RGB.h"

// public ----------------------------------------------------------------------------------------------------
RGB::RGB()
{
   m_r = 0;
   m_g = 0;
   m_b = 0;
};

// public ----------------------------------------------------------------------------------------------------
RGB::RGB(const int r, const int g, const int b)
{
   if (r > 1000)
   {
      m_r = 1000;
   }
   else if (r < 0)
   {
      m_r = 0;
   }
   else
   {
      m_r = r;
   }

   if (g > 1000)
   {
      m_g = 1000;
   }
   else if (g < 0)
   {
      m_g = 0;
   }
   else
   {
      m_g = g;
   }

   if (b > 1000)
   {
      m_b = 1000;
   }
   else if (b < 0)
   {
      m_b = 0;
   }
   else
   {
      m_b = b;
   }
};

// public ----------------------------------------------------------------------------------------------------
const int& RGB::getR() const
{
   return m_r;
};

// public ----------------------------------------------------------------------------------------------------
const int& RGB::getG() const
{
   return m_g;
};

// public ----------------------------------------------------------------------------------------------------
const int& RGB::getB() const
{
   return m_b;
};

// public ----------------------------------------------------------------------------------------------------
void RGB::setR(const int r)
{
   if (r > 1000)
   {
      m_r = 1000;
   }
   else if (r < 0)
   {
      m_r = 0;
   }
   else
   {
      m_r = r;
   }
};

// public ----------------------------------------------------------------------------------------------------
void RGB::setG(const int g)
{
   if (g > 1000)
   {
      m_g = 1000;
   }
   else if (g < 0)
   {
      m_g = 0;
   }
   else
   {
      m_g = g;
   }
};

// public ----------------------------------------------------------------------------------------------------
void RGB::setB(const int b)
{
   if (b > 1000)
   {
      m_b = 1000;
   }
   else if (b < 0)
   {
      m_b = 0;
   }
   else
   {
      m_b = b;
   }
};
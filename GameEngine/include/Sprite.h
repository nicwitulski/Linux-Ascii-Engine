//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file Sprite.h
/// @author Nicholas Witulski (nicwitulski@gmail.com)
/// @brief Holds a vector of Pixels to form a sprite
/// @version 0.1
/// @date 2025-06-27
///
/// @copyright Copyright (c) 2025
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef SPRITE_H
#define SPRITE_H

#include "Pixel.h"
#include <vector>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class Sprite
///
/// Holds a vector of Pixels to form a sprite
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Sprite
{
private:
   std::vector<Pixel> m_pixels;
   Position           m_anchor;
   int                m_layer;

public:
   Sprite();
   Sprite(const std::vector<Pixel> pixels);
   Sprite(const std::vector<Pixel> pixels, const int layer);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setAnchor
   ///
   /// @param position - Position to set the anchor to
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setAnchor(const Position position);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn addPixel
   ///
   /// @param pixel - Pixel to add to sprite
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void addPixel(const Pixel pixel);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getPixels
   ///
   /// @return Vector of pixels associated with this sprite
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const std::vector<Pixel>& getPixels() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getPixelsMutable
   ///
   /// @return Vector of pixels associated with this sprite
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   std::vector<Pixel>& getPixelsMutable();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getPixelAtPosition
   ///
   /// @param position - Position to get the pixel at
   /// @return Pixel at the given position
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   Pixel getPixelCopyAtPosition(Position position);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getPixelMutableAtPosition
   ///
   /// @param position - Position to get the pixel at
   /// @return Pixel at the given position
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   Pixel& getPixelMutableAtPosition(Position position);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setPixels
   ///
   /// @param pixels - Vector of pixels to set the sprite to
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setPixels(const std::vector<Pixel> pixels);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn displace
   ///
   /// @param dx - X vector difference value to adjust the sprite by
   /// @param dy - Y vector difference value to adjust the sprite by
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void displace(const int dx, const int dy);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn moveAnchorToPosition
   ///
   /// @param position - Position to move the anchor to. Moves the whole sprite
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void moveAnchorToPosition(const Position position);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getAnchor
   ///
   /// @return The sprite's anchor position
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const Position& getAnchor() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn refreshAnchor
   ///
   /// Iterates through all pixels and finds the smallest x and y position to reassign anchor. Heavy on
   /// resources, only use when loading sprite for first time. The anchor will get adjusted dynamically
   /// from there.
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void refreshAnchor();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getLayer
   ///
   /// @return Integer of what layer is associated with the object
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const int& getLayer() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setLayer
   ///
   /// @param layer - Sets the object's layer value
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setLayer(const int layer);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn positionInBounds
   ///
   /// @return Boolean indicating if sprite has a pixel at the given position
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool positionInBounds(Position position) const;
};

#endif

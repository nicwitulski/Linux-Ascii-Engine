//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file Slider.h
/// @author Nicholas Witulski (nicwitulski@gmail.com)
/// @brief Defines a UI slider element with customizable length and position
/// @version 0.1
/// @date 2025-06-27
///
/// @copyright Copyright (c) 2025
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef SLIDER_H
#define SLIDER_H

#include "UIElement.h"
#include <memory>
#include <string>
#include <vector>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class Slider
///
/// A UI slider element. The user can set the length and get the current value as a percentage.
/// The slider is printable and can be displayed on the screen.
/// By default, uses a horizontal slider with a bar and a handle.
/// If the user sets their own animation, they are responsible for updating the visual state.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Slider : public UIElement
{
private:
   int  m_length;     // Number of steps/positions (minimum 2)
   int  m_position;   // Current handle position (0 ... m_length-1)
   bool m_horizontal; // True for horizontal, false for vertical

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn updateSprite
   ///
   /// Updates the default sprite/animation to reflect the current slider position.
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void updateSprite();

public:
   Slider(int length = 10, bool horizontal = true);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setLength
   ///
   /// Sets the length of the slider (minimum 2).
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setLength(int length);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getLength
   ///
   /// @return The length of the slider
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   int getLength() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setPosition
   ///
   /// Sets the slider handle position (clamped to [0, length-1]).
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setPosition(int pos);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getPosition
   ///
   /// @return The current position of the slider handle
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   int getPosition() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn moveLeft
   ///
   /// Moves the slider handle left (or up).
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void moveLeft();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn moveRight
   ///
   /// Moves the slider handle right (or down).
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void moveRight();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getValue
   ///
   /// @return Float in [0.0, 1.0] representing the slider's current value.
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   float getValue() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setAnimation
   ///
   /// Allows the user to set a custom animation. If used, the user is responsible for updating the visual state.
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setAnimation(const Animation& animation);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn mouseInBounds
   ///
   /// @param position - Position of mouse to check bounds of
   /// @return Boolean indicating if the mouse position is within the slider bounds
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool mouseInBounds(Position position);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setPositionFromMouse
   ///
   /// Sets the slider position based on mouse position relative to the slider bounds.
   /// @param mousePosition - The mouse position to convert to slider position
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setPositionFromMouse(Position mousePosition);
};

#endif

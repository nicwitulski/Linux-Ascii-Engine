//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file NcursesWindow.h
/// @author Nicholas Witulski (nicwitulski@gmail.com)
/// @brief Manages the creation and destruction of ncurses windows
/// @version 0.1
/// @date 2025-07-08
///
/// @copyright Copyright (c) 2025
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef NCURSESWINDOW_H
#define NCURSESWINDOW_H

#include "Pixel.h"
#include "Printable.h"
#include <ncurses.h>
#include <memory>
#include <vector>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class NcursesWindow
///
/// Manages the creation and destruction of ncurses windows
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
class NcursesWindow : public std::enable_shared_from_this<NcursesWindow>
{
private:
   int                                     m_currentHeight;
   int                                     m_currentLength;
   int                                     m_originalHeight;
   int                                     m_originalLength;
   WINDOW*                                 m_window;
   std::vector<std::vector<Pixel>>         m_currentFrameBuffer;
   std::vector<std::vector<Pixel>>         m_lastFrameBuffer;
   std::vector<std::shared_ptr<Printable>> m_containedPrintables;
   bool                                    m_displayNeedsCleared;
   bool                                    m_printablesNeedSorted;
   int                                     m_windowLayer;
   bool                                    m_isMoveableByCamera;
   int                                     m_basePositionX;
   int                                     m_basePositionY;
   bool                                    m_drawBorder;
   bool                                    m_isDraggable;
   bool                                    m_autoResize;
   int                                     m_paddingX;
   int                                     m_paddingY;
   int                                     m_minWidth;
   int                                     m_minHeight;

   // Sub-window support
   std::weak_ptr<NcursesWindow>                m_parentWindow;
   std::vector<std::shared_ptr<NcursesWindow>> m_subWindows;
   bool                                        m_isSubWindow;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn calculateContentBounds
   ///
   /// Calculates the bounding box of all printables in the window
   /// @param minX - minimum X coordinate of content
   /// @param minY - minimum Y coordinate of content
   /// @param maxX - maximum X coordinate of content
   /// @param maxY - maximum Y coordinate of content
   /// @return true if content exists, false if window is empty
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool calculateContentBounds(int& minX, int& minY, int& maxX, int& maxY);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn calculateRequiredSize
   ///
   /// Calculates the required window size based on content bounds
   /// @param requiredWidth - calculated required width
   /// @param requiredHeight - calculated required height
   /// @return true if resize is needed, false if current size is sufficient
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool calculateRequiredSize(int& requiredWidth, int& requiredHeight);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn performResize
   ///
   /// Performs the actual window resize operation
   /// @param newWidth - new window width
   /// @param newHeight - new window height
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void performResize(int newWidth, int newHeight);

public:
   NcursesWindow(int length, int height, int windowLayer, bool isMoveableByCamera = false, int posX = 0,
                 int posY = 0);
   NcursesWindow(WINDOW* window, int windowLayer, bool isMoveableByCamera = false);
   NcursesWindow(bool autoResize, int windowLayer, bool isMoveableByCamera = false, int posX = 0,
                 int posY = 0, int paddingX = 2, int paddingY = 1, int minWidth = 20, int minHeight = 10);
   ~NcursesWindow();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn addPrintable
   ///
   /// @param printable - the printable to add to the window
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void addPrintable(const std::shared_ptr<Printable> printable);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn removePrintable
   ///
   /// @param printable - the printable to remove from the window
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void removePrintable(const std::shared_ptr<Printable> printable);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn clearPrintables
   ///
   /// Clears all printables from the window
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void clearPrintables();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn refreshWindow
   ///
   /// @param deltaTime - the time since the last refresh
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void refreshWindow(const float deltaTime);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void refreshPrintables(const float deltaTime);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getWindow
   ///
   /// @return the window
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   WINDOW* getWindow();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getDisplayNeedsCleared
   ///
   /// @return the display needs cleared
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const bool& getDisplayNeedsCleared() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setDisplayNeedsCleared
   ///
   /// @param displayNeedsCleared - the display needs cleared
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setDisplayNeedsCleared(const bool displayNeedsCleared);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getPrintablesNeedSorted
   ///
   /// @return the printables need sorted
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const bool& getPrintablesNeedSorted() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setPrintablesNeedSorted
   ///
   /// @param printablesNeedSorted - the printables need sorted
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setPrintablesNeedSorted(const bool printablesNeedSorted);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getWindowLayer
   ///
   /// @return the window layer
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const int& getWindowLayer() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setWindowLayer
   ///
   /// @param windowLayer - the window layer
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setWindowLayer(const int windowLayer);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn isMoveableByCamera
   ///
   /// @return whether this window moves with camera offset
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool isMoveableByCamera() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setMoveableByCamera
   ///
   /// @param moveable - whether this window should move with camera offset
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setMoveableByCamera(const bool moveable);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn updateWindowPosition
   ///
   /// Updates the window's screen position based on camera offset (if moveable by camera)
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void updateWindowPosition();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setBasePosition
   ///
   /// @param x - base X position of the window
   /// @param y - base Y position of the window
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setBasePosition(const int x, const int y);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn closeWindow
   ///
   /// Closes the window
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void closeWindow();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn clearBuffer
   ///
   /// Clears the buffer
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void clearBuffer();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn printPixel
   ///
   /// @param pixel - the pixel to print to the ncurses window (gets stored in buffer first)
   /// @param isMoveableByCamera - bool to know if camera offsets are needed or not
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void printPixel(const Pixel pixel, const bool isMoveableByCamera);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn printSprite
   ///
   /// @param sprite - sprite to print to window
   /// @param isMoveableByCamera - bool to know if camera offsets are needed or not
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void printSprite(const Sprite sprite, const bool isMoveableByCamera);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn eraseSprite
   ///
   /// @param sprite - sprite needed to be removed
   /// @param isMoveableByCamera - bool to know if camera offsets are needed or not
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void eraseSprite(const Sprite sprite, const bool isMoveableByCamera);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setBorderEnabled
   ///
   /// @param enabled - whether to draw a border around the window
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setBorderEnabled(const bool enabled);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn isBorderEnabled
   ///
   /// @return whether the border is enabled for this window
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool isBorderEnabled() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setDraggable
   ///
   /// @param draggable - whether the window can be dragged by clicking on its border
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setDraggable(const bool draggable);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn isDraggable
   ///
   /// @return whether the window can be dragged by clicking on its border
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool isDraggable() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn isMouseOnBorder
   ///
   /// @param mousePos - the mouse position to check
   /// @return true if the mouse position is on the window border
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool isMouseOnBorder(const Position& mousePos) const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn isMouseInWindow
   ///
   /// @param mousePos - the mouse position to check
   /// @return true if the mouse position is within the window bounds
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool isMouseInWindow(const Position& mousePos) const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setAutoResize
   ///
   /// @param autoResize - whether the window should automatically resize to fit its contents
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setAutoResize(const bool autoResize);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn isAutoResize
   ///
   /// @return whether the window automatically resizes to fit its contents
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool isAutoResize() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setPadding
   ///
   /// @param paddingX - horizontal padding around content
   /// @param paddingY - vertical padding around content
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setPadding(const int paddingX, const int paddingY);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setMinimumSize
   ///
   /// @param minWidth - minimum window width
   /// @param minHeight - minimum window height
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setMinimumSize(const int minWidth, const int minHeight);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn resizeToFitContents
   ///
   /// Manually trigger a resize to fit the current contents
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void resizeToFitContents();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn createSubWindow
   ///
   /// Creates a sub-window within this window using relative positioning
   /// @param width - width of the sub-window
   /// @param height - height of the sub-window
   /// @param relativeX - X position relative to parent window (0 = left edge)
   /// @param relativeY - Y position relative to parent window (0 = top edge)
   /// @param windowLayer - layer for rendering order
   /// @return shared_ptr to the created sub-window
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   std::shared_ptr<NcursesWindow> createSubWindow(int width, int height, int relativeX, int relativeY,
                                                  int windowLayer);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn removeSubWindow
   ///
   /// Removes a sub-window from this window
   /// @param subWindow - the sub-window to remove
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void removeSubWindow(std::shared_ptr<NcursesWindow> subWindow);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getSubWindows
   ///
   /// @return vector of all sub-windows
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const std::vector<std::shared_ptr<NcursesWindow>>& getSubWindows() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getParentWindow
   ///
   /// @return shared_ptr to parent window (nullptr if this is a top-level window)
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   std::shared_ptr<NcursesWindow> getParentWindow() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn isSubWindow
   ///
   /// @return true if this is a sub-window
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool isSubWindow() const;
};
#endif
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file Printable.h
/// @author Nicholas Witulski (nicwitulski@gmail.com)
/// @brief Gives an object that is meant to be printed to an ncurses display attribues that allow it to be
/// @version 0.1
/// @date 2025-06-27
///
/// @copyright Copyright (c) 2025
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef PRINTABLE_H
#define PRINTABLE_H

#include "Animation.h"
#include <string>
#include <vector>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class Printable
///
/// Gives an object that is meant to be printed to an ncurses display attribues that allow it to be.
/// Holds multiple animation so that the printable object can cycle
/// through animation easily (such as idle, walking, etc.)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Printable
{
protected:
   std::vector<Animation> m_animations;
   std::string            m_currentAnimationName = "default";
   std::string            m_printableName;
   bool                   m_visable;
   bool                   m_moveableByCamera;
   std::vector<Sprite>    m_dirtySprites; // Old positions that needs erasing

public:
   Printable();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn addAnimation
   ///
   /// @param animation - Adds an animation to the printable object
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void addAnimation(const Animation animation);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getPreviousFrameSprite
   ///
   /// @return A boolean on if the animation is actually in m_animations or not.
   /// If not, return false, true if so
   ///
   /// @param name - string of the name that is associated with the animation
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool setCurrentAnimation(const std::string name);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getAnimations
   ///
   /// @return all animations in printable
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const std::vector<Animation>& getAnimations() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getAnimations
   ///
   /// @return all animations in printable mutable
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   std::vector<Animation>& getAnimationsMutable();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getCurrentAnimationName
   ///
   /// @return the name associated with the current animation
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const std::string& getCurrentAnimationName() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn displace
   ///
   /// Displaces every animation. Virtual for unique object displace functions (UIElement for example)
   ///
   /// @param dx - x axis difference
   /// @param dy - y axis difference
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   virtual void displace(const int dx, const int dy);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn isVisable
   ///
   /// @return a bool on if the object is visable to the ncurses display or not
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool isVisable() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setVisability
   ///
   /// @param visable - sets the objects visability
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setVisability(const bool visable);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn isMoveableByCamera
   ///
   /// @return a boolean on if the object will get printed with the camera offset or if it'll stay in
   /// its assigned world position when printed. UI should probably be not moveable (at the the HUD).
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool isMoveableByCamera() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setMoveableByCamera
   ///
   /// @param moveable - sets object to be printed with camera offset or not.
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setMoveableByCamera(const bool moveable);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getCurrentAnimation
   ///
   /// @return the animation that is currently set. Goes off of m_currentAnimation string name
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const Animation& getCurrentAnimation() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getCurrentAnimationMutable
   ///
   /// @return the animation that is currently set, mutable. Goes off of m_currentAnimation string name
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   Animation& getCurrentAnimationMutable();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn addDirtySprite
   ///
   /// @param sprite - adds the sprite to a list that'll be cleared every screen refresh. These sprites are
   /// set to be erased from the ncureses window.
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void addDirtySprite(const Sprite sprite);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getDirtySprites
   ///
   /// @return all of the current sprites that need to be removed from the display
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const std::vector<Sprite>& getDirtySprites() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn clearDirtySprites
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void clearDirtySprites();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn positionInBoundsOfEntity
   ///
   /// @param position - position to move entity to
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void moveToPosition(const Position position);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn positionInBoundsOfEntity
   ///
   /// @param layer
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setAllAnimationSpriteLayers(const int layer);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setPrintableName
   ///
   /// @param name
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setPrintableName(const std::string name);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getPrintableName
   ///
   /// @return the name of the printable object
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const std::string& getPrintableName() const;
};

#endif
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file Printable.h
/// @author Nicholas Witulski (nicwitulski@gmail.com)
/// @brief Base class for objects that can be printed to an ncurses display. Provides animation management
/// @version 0.1
/// @date 2025-06-27
///
/// @copyright Copyright (c) 2025
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef PRINTABLE_H
#define PRINTABLE_H

#include "Animation.h"
#include <string>
#include <vector>

// Forward declaration
typedef struct _win_st WINDOW;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class Printable
///
/// Base class for objects that can be printed to an ncurses display. Provides animation management
/// and visibility control. Holds multiple animations so that printable objects can cycle through
/// different animations easily (such as idle, walking, etc.)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Printable
{
protected:
   std::vector<Animation> m_animations;
   std::string            m_currentAnimationName = "default";
   std::string            m_printableName;
   bool                   m_visable;
   bool                   m_moveableByCamera;
   std::vector<Sprite>    m_dirtySprites;
   WINDOW*                m_ncurseWindow;

public:
   Printable();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn addAnimation
   ///
   /// @param animation - Animation to add to the printable object
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void addAnimation(const Animation animation);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setCurrentAnimation
   ///
   /// @return A boolean indicating if the animation exists in m_animations
   ///
   /// @param name - String name associated with the animation
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool setCurrentAnimation(const std::string name);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getAnimations
   ///
   /// @return All animations in printable (const reference)
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const std::vector<Animation>& getAnimations() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getAnimationsMutable
   ///
   /// @return All animations in printable (mutable reference)
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   std::vector<Animation>& getAnimationsMutable();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getCurrentAnimationName
   ///
   /// @return The name associated with the current animation
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const std::string& getCurrentAnimationName() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn displace
   ///
   /// Displaces every animation. Virtual for unique object displace functions (UIElement for example)
   ///
   /// @param dx - X axis difference
   /// @param dy - Y axis difference
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   virtual void displace(const int dx, const int dy);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn isVisable
   ///
   /// @return Boolean indicating if the object is visible to the ncurses display
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool isVisable() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setVisability
   ///
   /// @param visable - Sets the object's visibility
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setVisability(const bool visable);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn isMoveableByCamera
   ///
   /// @return Boolean indicating if the object will be printed with camera offset or stay in its
   /// assigned world position. UI elements should typically not be moveable (for HUD elements).
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool isMoveableByCamera() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setMoveableByCamera
   ///
   /// @param moveable - Sets whether object should be printed with camera offset
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setMoveableByCamera(const bool moveable);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getCurrentAnimation
   ///
   /// @return The animation that is currently set (const reference)
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const Animation& getCurrentAnimation() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getCurrentAnimationMutable
   ///
   /// @return The animation that is currently set (mutable reference)
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   Animation& getCurrentAnimationMutable();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn addDirtySprite
   ///
   /// @param sprite - Adds sprite to list that will be cleared every screen refresh
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void addDirtySprite(const Sprite sprite);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getDirtySprites
   ///
   /// @return All current sprites that need to be removed from the display
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const std::vector<Sprite>& getDirtySprites() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn clearDirtySprites
   ///
   /// Clears all dirty sprites
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void clearDirtySprites();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn moveToPosition
   ///
   /// @param position - Position to move entity to
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void moveToPosition(const Position position);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setAllAnimationSpriteLayers
   ///
   /// @param layer - Layer to set for all sprites in all animations
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setAllAnimationSpriteLayers(const int layer);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setPrintableName
   ///
   /// @param name - Name to set for the printable object
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setPrintableName(const std::string name);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getPrintableName
   ///
   /// @return The name of the printable object
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const std::string& getPrintableName() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getNcurseWindow
   ///
   /// @return The ncurses window this printable is associated with
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   WINDOW* getNcurseWindow() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setNcurseWindow
   ///
   /// @param window - The ncurses window to associate with this printable
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setNcurseWindow(WINDOW* window);
};

#endif
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file Animation.h
/// @author Nicholas Witulski (nicwitulski@gmail.com)
/// @brief Defines an Animation which holds a vector of frames and advances through them
/// @version 0.1
/// @date 2025-06-27
///
/// @copyright Copyright (c) 2025
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef ANIMATION_H
#define ANIMATION_H

#include "Frame.h"
#include <string>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class Animation
///
/// Defines an Animation which holds a vector of frames and advances through them
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Animation
{
private:
   std::string        m_animationName;
   std::vector<Frame> m_frames;
   bool               m_repeats;
   bool               m_playing;

   size_t currentFrameIndex  = 0;
   size_t previousFrameIndex = 0;
   float  frameTimer         = -1.0f;

public:
   Animation();
   Animation(const std::string animationName, const std::vector<Frame> frames, const bool repeats);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn update
   ///
   /// Updates the animation to the next frame if the current frame is done playing for its duration
   ///
   /// @param deltaTime - Time used in frame updates to know if frame needs advanced or not
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void update(const float deltaTime);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getCurrentFrameSprite
   ///
   /// @return The current sprite
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const Sprite& getCurrentFrameSprite() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getCurrentFrameSpriteMutable
   ///
   /// @return The current mutable sprite
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   Sprite& getCurrentFrameSpriteMutable();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getPreviousFrameSprite
   ///
   /// @return The previous sprite. Used to erase previous sprite when advancing to the next one
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const Sprite& getPreviousFrameSprite() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getAnimationName
   ///
   /// @return Name of animation
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const std::string& getAnimationName() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getFrames
   ///
   /// @return Frames associated with animation
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const std::vector<Frame>& getFrames() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setAnimationName
   ///
   /// @param animationName - String that names the animation
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setAnimationName(const std::string animationName);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn displace
   ///
   /// Moves every frame by difference
   ///
   /// @param dx - Integer x axis difference
   /// @param dy - Integer y axis difference
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void displace(const int dx, const int dy);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setPlaying
   ///
   /// @param playing - Boolean that tells the animation to keep updating frames or stop on the current one
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setPlaying(const bool playing);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn isPlaying
   ///
   /// @return Boolean indicating if the animation is actively updating frames or not
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const bool& isPlaying() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn addPixelToCurrentFrame
   ///
   /// @param pixel - Adds a pixel to the current sprite/frame
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void addPixelToCurrentFrame(const Pixel pixel);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn manuallyIncrementFrame
   ///
   /// Instead of waiting for the next frame to update, directly updates to the next frame
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void manuallyIncrementFrame();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn manuallyDecrementFrame
   ///
   /// Manually sets the current frame to the previous one. NOTE: the previous frame becomes the current one
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void manuallyDecrementFrame();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setAllSpriteLayers
   ///
   /// @param layer - Layer to set for all sprites
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setAllSpriteLayers(const int layer);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getCurrentFrameIndex
   ///
   /// @return Current frame index
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   size_t getCurrentFrameIndex() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getTotalFrames
   ///
   /// @return Total number of frames in the animation
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   size_t getTotalFrames() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn addFrame
   ///
   /// @param frame - Frame to add to the animation
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void addFrame(const Frame& frame);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn hasNextFrame
   ///
   /// @return Boolean indicating if there is a next frame after current
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool hasNextFrame() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn hasPreviousFrame
   ///
   /// @return Boolean indicating if there is a previous frame before current
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool hasPreviousFrame() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getFrameAtIndex
   ///
   /// @param index - Index of the frame to get
   /// @return Frame at the specified index
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const Frame& getFrameAtIndex(size_t index) const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getFrameAtIndexMutable
   ///
   /// @param index - Index of the frame to get
   /// @return Mutable frame at the specified index
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   Frame& getFrameAtIndexMutable(size_t index);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setRepeats
   ///
   /// @param repeats - Boolean indicating if the animation should repeat
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setRepeats(const bool repeats);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getRepeats
   ///
   /// @return Boolean indicating if the animation should repeat
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   const bool& getRepeats() const;
};

#endif
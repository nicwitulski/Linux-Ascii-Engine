//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file ColorManager.h
/// @author Nicholas Witulski (nicwitulski@gmail)
/// @brief ColorManager handles color pairs and RGB management for ncurses.
/// Completely vibe coded, but it works.
/// @version 0.1
/// @date 2025-07-02
///
/// @copyright Copyright (c) 2025
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#pragma once
#include "RGB.h"
#include <ncurses.h>
#include <map>
#include <tuple>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class ColorManager
///
/// ColorManager handles color pairs and RGB management for ncurses.
/// Completely vibe coded, but it works.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
class ColorManager
{
public:
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getColorPair
   ///
   /// Returns the color pair index for the given fg/bg. Allocates if needed.
   ///
   /// @param fg Foreground RGB color
   /// @param bg Background RGB color
   /// @return Color pair index (0-255)
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   static int getColorPair(const RGB& fg, const RGB& bg);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn initialize
   ///
   // Initializes color pairs (call after start_color())
   //////////////////////////////////////////////////////////////////////////////////////////////////////////
   static void initialize();

private:
   // Key: (fg_r, fg_g, fg_b, bg_r, bg_g, bg_b)
   using ColorKey = std::tuple<int, int, int, int, int, int>;
   static std::map<ColorKey, int> colorPairMap;
   static int                     nextPair;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn registerColor
   ///
   /// Registers a color with the given RGB values and returns the color ID.
   ///
   /// @param r Red component (0-1000)
   /// @param g Green component (0-1000)
   /// @param b Blue component (0-1000)
   /// @param colorId Color ID to register (16+ for custom colors)
   /// @return Registered color ID
   //////////////////////////////////////////////////////////////////////////////////////////////////////////
   static short registerColor(short r, short g, short b, short colorId);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn findOrRegisterColor
   ///
   /// Finds or registers a color based on RGB values.
   ///
   /// @param rgb RGB color to find or register
   /// @param colorIdOut Output parameter for the found or registered color ID
   /// @return Registered color ID
   //////////////////////////////////////////////////////////////////////////////////////////////////////////
   static short findOrRegisterColor(const RGB& rgb, short& colorIdOut);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn makeKey
   ///
   /// Creates a key for the color pair map based on foreground and background RGB values.
   ///
   /// @param fg Foreground RGB color
   /// @param bg Background RGB color
   /// @return ColorKey tuple for the color pair
   //////////////////////////////////////////////////////////////////////////////////////////////////////////
   static ColorKey makeKey(const RGB& fg, const RGB& bg);
};

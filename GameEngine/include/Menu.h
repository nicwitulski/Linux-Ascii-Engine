//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file Menu.h
/// @author Nicholas Witulski (nicwitulski@gmail.com)
/// @brief Scrollable menu system for directory browsing and item selection
/// @version 0.1
/// @date 2025-06-27
///
/// @copyright Copyright (c) 2025
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef MENU_H
#define MENU_H

#include "UIElement.h"
#include <functional>
#include <string>
#include <vector>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class Menu
///
/// Scrollable menu system that extends UIElement for directory browsing and item selection.
/// Handles arrow key navigation, scrolling, and item selection with callbacks.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Menu : public UIElement
{
private:
   std::vector<std::string>                m_menuItems;
   int                                     m_selectedIndex;
   int                                     m_scrollOffset;
   int                                     m_maxVisibleItems;
   int                                     m_menuWidth;
   int                                     m_menuHeight;
   std::function<void(const std::string&)> m_onSelectCallback;
   std::function<void()>                   m_onCancelCallback;
   bool                                    m_isActive;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn generateMenuSprite
   ///
   /// Generates the current menu display sprite based on items, selection, and scroll position
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void generateMenuSprite();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn updateScrollOffset
   ///
   /// Updates scroll offset to ensure selected item is visible
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void updateScrollOffset();

public:
   Menu(const std::vector<std::string>& menuItems, int maxVisibleItems = 10, int width = 50);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setOnSelectCallback
   ///
   /// Sets the callback function to be called when an item is selected
   /// @param callback - Function to call with the selected item string
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setOnSelectCallback(std::function<void(const std::string&)> callback);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setOnCancelCallback
   ///
   /// Sets the callback function to be called when menu is cancelled (ESC pressed)
   /// @param callback - Function to call when menu is cancelled
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setOnCancelCallback(std::function<void()> callback);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn handleInput
   ///
   /// Handles keyboard input for menu navigation
   /// @param key - The key pressed
   /// @return true if the input was handled by the menu, false otherwise
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool handleInput(int key);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn moveUp
   ///
   /// Moves selection up one item
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void moveUp();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn moveDown
   ///
   /// Moves selection down one item
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void moveDown();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn selectCurrent
   ///
   /// Selects the currently highlighted item and calls the callback
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void selectCurrent();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn cancel
   ///
   /// Cancels the menu and calls the cancel callback
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void cancel();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setActive
   ///
   /// Sets whether the menu is active and should handle input
   /// @param active - true to activate menu, false to deactivate
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setActive(bool active);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn isActive
   ///
   /// @return true if the menu is currently active
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool isActive() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setMenuItems
   ///
   /// Updates the menu items and resets selection
   /// @param items - New list of menu items
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setMenuItems(const std::vector<std::string>& items);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getSelectedItem
   ///
   /// @return The currently selected item string
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   std::string getSelectedItem() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getSelectedIndex
   ///
   /// @return The index of the currently selected item
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   int getSelectedIndex() const;
};

#endif
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file Display.h
/// @author Nicholas Witulski (nicwitulski@gmail.com)
/// @brief Handles all of the ncurses calls, prints, and refreshes
/// @version 0.1
/// @date 2025-06-27
///
/// @copyright Copyright (c) 2025
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef DISPLAY_H
#define DISPLAY_H

#include "Animation.h"
#include "Parameters.h"
#include "ncurses.h"
#include <algorithm>
#include <chrono>
#include <cstdlib>
#include <cstring>
#include <memory>
#include <mutex>
#include <unordered_map>
#include <vector>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class Display
///
/// Handles all of the ncurses calls, prints, and refreshes
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
class Display
{
private:
   static std::vector<std::vector<char>> currentFrameBuffer;
   static std::vector<std::vector<char>> lastFrameBuffer;

public:
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn initCurse
   ///
   /// Initializes ncurses and all of its settings
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   static void initCurse();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getUserInput
   ///
   /// @return the users input in an integer converted to a char
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   static char getUserInput();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn closeCurseWindow
   ///
   /// Shuts down ncureses safely
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   static void closeCurseWindow();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn refreshDisplay
   ///
   /// Refreshes the display and handles terminal size changes
   ///
   /// @param deltaTime - gameEngine refresh time difference used for animation updates
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   static void refreshDisplay(float deltaTime);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn printPixel
   ///
   /// @param pixel - the pixel to print to the ncurses window (gets stored in buffer first)
   /// @param isMoveableByCamera - bool to know if camera offsets are needed or not
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   static void printPixel(const Pixel pixel, bool isMoveableByCamera);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn printSprite
   ///
   /// @param sprite - sprite to print to window
   /// @param isMoveableByCamera - bool to know if camera offsets are needed or not
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   static void printSprite(Sprite sprite, bool isMoveableByCamera);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn eraseSprite
   ///
   /// @param sprite - sprite needed to be removed
   /// @param isMoveableByCamera - bool to know if camera offsets are needed or not
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   static void eraseSprite(Sprite sprite, bool isMoveableByCamera);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn refreshEntities
   ///
   /// @param deltaTime - gameEngine refresh tiem difference used for animation updates
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   static void refreshEntities(float deltaTime);
};

#endif
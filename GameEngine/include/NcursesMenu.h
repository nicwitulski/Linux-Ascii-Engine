//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file NcursesMenu.h
/// @author Nicholas Witulski (nicwitulski@gmail.com)
/// @brief Native ncurses menu implementation with built-in highlighting
/// @version 0.1
/// @date 2025-06-27
///
/// @copyright Copyright (c) 2025
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef NCURSESMENU_H
#define NCURSESMENU_H

#include <ncursesw/menu.h>
#include <ncursesw/ncurses.h>
#include <functional>
#include <string>
#include <vector>

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class NcursesMenu
///
/// Native ncurses menu implementation with built-in highlighting and navigation
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
class NcursesMenu
{
private:
   ITEM**                                  m_items;
   MENU*                                   m_menu;
   WINDOW*                                 m_menuWindow;
   WINDOW*                                 m_subWindow;
   std::vector<std::string>                m_menuItems;
   std::function<void(const std::string&)> m_onSelectCallback;
   std::function<void()>                   m_onCancelCallback;
   bool                                    m_isActive;
   int                                     m_windowWidth;
   int                                     m_windowHeight;
   int                                     m_maxVisibleItems;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn createMenuItems
   ///
   /// Creates ncurses ITEM array from string vector
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void createMenuItems();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn cleanupMenu
   ///
   /// Cleans up ncurses menu resources
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void cleanupMenu();

public:
   NcursesMenu(const std::vector<std::string>& menuItems, int windowWidth = 50, int windowHeight = 15,
               int maxVisibleItems = 10);
   ~NcursesMenu();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setPosition
   ///
   /// Sets the position of the menu window
   /// @param x - X coordinate
   /// @param y - Y coordinate
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setPosition(int x, int y);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setOnSelectCallback
   ///
   /// Sets the callback function to be called when an item is selected
   /// @param callback - Function to call with the selected item string
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setOnSelectCallback(std::function<void(const std::string&)> callback);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setOnCancelCallback
   ///
   /// Sets the callback function to be called when menu is cancelled
   /// @param callback - Function to call when menu is cancelled
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setOnCancelCallback(std::function<void()> callback);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn handleInput
   ///
   /// Handles keyboard input for menu navigation
   /// @param key - The key pressed
   /// @return true if the input was handled by the menu, false otherwise
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool handleInput(int key);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn show
   ///
   /// Shows the menu and makes it active
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void show();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn hide
   ///
   /// Hides the menu and makes it inactive
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void hide();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn isActive
   ///
   /// @return true if the menu is currently active
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool isActive() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn refresh
   ///
   /// Refreshes the menu display
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void refresh();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getSelectedItem
   ///
   /// @return The currently selected item string
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   std::string getSelectedItem() const;
};

#endif
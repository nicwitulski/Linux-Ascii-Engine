//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @file InputHandler.h
/// @author Nicholas Witulski (nicwitulski@gmail.com)
/// @brief Handles input processing for UI elements in the GameEngine
/// @version 0.1
/// @date 2025-06-27
///
/// @copyright Copyright (c) 2025
///
//////////////////////////////////////////////////////////////////////////////////////////////////////////////

#ifndef INPUTHANDLER_H
#define INPUTHANDLER_H

#include "Button.h"
#include "Slider.h"
#include <functional>
#include <memory>
#include <vector>

// Forward declarations
class NcursesWindow;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////
/// @class InputHandler
///
/// Handles all input processing for UI elements in the GameEngine.
/// Automatically manages button clicks and slider interactions.
//////////////////////////////////////////////////////////////////////////////////////////////////////////////
class InputHandler
{
private:
   MEVENT                         event;
   bool                           sliderDragging = false;
   std::shared_ptr<Slider>        draggedSlider; // Track which slider is being dragged
   bool                           windowDragging = false;
   std::shared_ptr<NcursesWindow> draggedWindow;        // Track which window is being dragged
   Position                       dragOffset;           // Offset from mouse position to window position
   bool                    mouseEventProcessed = false; // Track if we processed a mouse event this frame
   std::shared_ptr<Button> pressedButton; // Track which button was pressed to execute on release

   // Automatic button highlighting state
   std::shared_ptr<Button> currentHoveredButton;
   std::shared_ptr<Button> currentClickedButton;
   std::shared_ptr<Button> currentSelectedButton;

   // UI Elements
   std::vector<std::shared_ptr<Button>> buttons;
   std::vector<std::shared_ptr<Slider>> sliders;

   // Window focus management
   std::vector<std::shared_ptr<NcursesWindow>> inFocusedWindows;
   bool                                        contextsExplicitlyManaged;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn handleMousePress
   ///
   /// Handles mouse button press events for UI elements
   /// @param mousePosition - the current mouse position
   /// @return true if the mouse was over a UI element, false otherwise
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool handleMousePress(Position mousePosition);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn handleMouseRelease
   ///
   /// Handles mouse button release events
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void handleMouseRelease();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn handleMouseDrag
   ///
   /// Handles mouse drag events for slider interactions
   /// @param mousePosition - the current mouse position
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void handleMouseDrag(Position mousePosition);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn handleWindowPress
   ///
   /// Handles mouse press events for window dragging
   /// @param mousePosition - the current mouse position
   /// @return true if a window was clicked for dragging, false otherwise
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool handleWindowPress(Position mousePosition);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn handleWindowRelease
   ///
   /// Handles mouse release events for window dragging
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void handleWindowRelease();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn handleWindowDrag
   ///
   /// Handles mouse drag events for window dragging
   /// @param mousePosition - the current mouse position
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void handleWindowDrag(Position mousePosition);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn updateButtonHighlighting
   ///
   /// Updates automatic button highlighting based on mouse position and state
   /// @param mousePosition - the current mouse position
   /// @param isMousePressed - whether the mouse button is currently pressed
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void updateButtonHighlighting(Position mousePosition, bool isMousePressed);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getButtonAtPosition
   ///
   /// Finds a button at the given position that has auto-highlighting enabled
   /// @param position - the position to check
   /// @return the button at the position, or nullptr if none found
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   std::shared_ptr<Button> getButtonAtPosition(Position position);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn isWindowInFocus
   ///
   /// Checks if a window is in the focused windows list
   /// @param window - the window to check
   /// @return true if the window is in focus, false otherwise
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool isWindowInFocus(WINDOW* window) const;

public:
   InputHandler();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn addButton
   ///
   /// Adds a button to the input handler for mouse interaction
   /// @param button - the button to add
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void addButton(std::shared_ptr<Button> button);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn addSlider
   ///
   /// Adds a slider to the input handler for mouse interaction
   /// @param slider - the slider to add
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void addSlider(std::shared_ptr<Slider> slider);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn removeButton
   ///
   /// Removes a button from the input handler
   /// @param button - the button to remove
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void removeButton(std::shared_ptr<Button> button);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn removeSlider
   ///
   /// Removes a slider from the input handler
   /// @param slider - the slider to remove
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void removeSlider(std::shared_ptr<Slider> slider);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn addContext
   ///
   /// Adds a window to the focused windows list, enabling input for its UI elements
   /// @param window - the window to add to focus
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void addContext(std::shared_ptr<NcursesWindow> window);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn removeContext
   ///
   /// Removes a window from the focused windows list, disabling input for its UI elements
   /// @param window - the window to remove from focus
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void removeContext(std::shared_ptr<NcursesWindow> window);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn clearContext
   ///
   /// Clears all windows from the focused windows list
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void clearContext();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn setSelectedButton
   ///
   /// Sets the currently selected button (for persistent highlighting)
   /// @param button - the button to select, or nullptr to clear selection
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void setSelectedButton(std::shared_ptr<Button> button);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getSelectedButton
   ///
   /// @return the currently selected button, or nullptr if none
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   std::shared_ptr<Button> getSelectedButton() const;

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn processInput
   ///
   /// Main input processing function that handles all input types
   /// @param userInput - the raw input character from ncurses
   /// @return true if the input was handled by a UI element, false otherwise
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool processInput(int userInput);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn clear
   ///
   /// Clears all registered UI elements
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   void clear();

   // Returns true if the mouse is over any UI element (button or slider)
   bool isMouseOverUI(Position mousePos);

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn getLastMouseEvent
   ///
   /// Returns the last processed mouse event
   /// @return pointer to the last mouse event, or nullptr if no event was processed
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   MEVENT* getLastMouseEvent();

   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   /// @fn wasMouseEventProcessed
   ///
   /// Returns true if a mouse event was processed this frame
   /// @return true if a mouse event was processed, false otherwise
   ///////////////////////////////////////////////////////////////////////////////////////////////////////////
   bool wasMouseEventProcessed();
};

#endif